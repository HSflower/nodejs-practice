express 템플릿엔진은 Jade
설치 : npm install jade --save
[jade 문법]
'들여쓰기'로 태그 안이라는 표시(레벨표시)
* app.locals.pretty (app.js)로 코드 정렬
'-'로 프로그래밍 코드라는 표시
'_'를 app에서 온 매개변수 앞에 붙이거나 그냥=으로 대입해서 사용 가능
  title = _title, title = pageTitle

* supervisor app.js로 노드를 실행하면 노드 재실행 하지 않아도됨.
npm install supervisor -g //-g: 컴퓨터 전역에서 사용할 수 있는 변수
supervisor app.js로 실행//save시 자동 노드 실행

[쿼리 스트링] URL을 이용해 애플리케이션에 정보전달
http://a.com/topic : /topic이라는 path
http://a.com/topic?id=1 : (본 app에서는)topic이라는 라우터에 id=1이라는 숫자 전달
  하나의 라우터로 각각의 값에 따라 다른 결과를 출력할 수 있다.
  = 쿼리스트링
* HTTP/ domain / path ? query string
[express에서의 쿼리스트링 사용]
res.send(req.query.name);
* app.get() 등 HTTP메소드의 인자 : request, response
  req, res 인자의 객체, 속성과 메서드가 존재 : expressjs.com 참고
'&' 쿼리스트링의 값을 구분하는 구분자
[req의 query객체]
쿼리 스트링을 이용해서 값을 통해서 페이지를 가져오는 방법
시맨틱URL(의미론적) : 쿼리스트링이 아니라 정보만 깔끔하게 전달
* RESTful API 등에서 사용

[POST방식]
예제 : form
// post방식으로 body를 전달할거라면 default로는 정의되지 않으므로,
// body-parser, multer라는 미들웨어를 사용해야함.
npm install body-parser --save
var bodyParser = require();
app.use(bodyParser.urlencoded())
모든 요청들은 bodyParser라는 미들웨어를 거쳐서 동작
post방식은 URL에 정보를 노출하지 않고, 대량데이터 전송가능.
  (보안성을 위해서는 https통신이 필요)
  (body-parser라는 미들웨어사용 필요)
get방식은 쿼리스트링으로 데이터를 전송해서 url에 따라 다른페이지를 보여줄 수 있다.
  (express가 기본적으로 제공)

[사용자 데이터는 data파일에 저장 :DB대신]

[Express] 정적파일 서비스 방법
app.use(express.static('public')); //public폴더의 정적파일을 사용한다.
[Express] 웹페이지 동적/정적 서비스 방법 - 템플릿 기초
정적 : 위의 public폴더에 html파일을 제작하고 해당 url로 접속
  수정은 이 html파일을 수정 후, 새로고침(서버 리부트 불필요)
동적 : app.js에 라우터 추가 - app.get('/dynamic', function(req,res){ res.send('html코드') });
  res.send('html코드:엔터=\로 표시') 또는
  var output = `html코드` 후 res.send(output); // ${다른var}도 사용가능
  dynamic이라는 주소에 동적생성 html코드 구현 , 서버 리부트 필요
  - 그럼 여기에 정말  css분리해서 생성하게 되겠네요.
  - 관련 js api : time = Date();,  for문이용 list
[Express] 템플릿엔진 jade - HTML태그 자동생성, js변수 사용가능, 대규모구축 외 장점
  1. 템플릿이 있는 디렉토리에 npm 패키지 설치 :npm install jade --save
  2. 사용할 템플릿엔진을 노드에게 알려준다 : app.set('view engine', 'jade'); view engine은 jade이다.
    템플릿의 위치를 익스프레스에게 알려준다 : app.set('views', './views');
    템플릿엔진을 이용해 페이지 구현 : app.get('/url', function(r,r){
      res.render('temp'); //views의 temp라는 jade파일을 웹페이지로 렌더링해 이용
    });
- 템플릿엔진의 문법 : 탭 = 안에다 작성, 들여쓰기 기준으로 레벨결정
    app.js 에서 res.render('temp', {time: 'hello', _title:'jade'}); 하면,
      jade에서 time변수를 사용 가능 - 객체를 주입해서, 그 변수를 사용하는 개념
    js의 for문은 앞에 -를 붙인다.
    태그안에 글자를 출력할 때 : li coding으로 <li>coding</coding>가능
      div= _time 도 가능
  jade-lang.com 에서 문법 공부 가능
- jade express code pretty : app.locals.pretty = true;

[팁] Nodejs 자동 재시작 : node-supervisor
  nodejs app.js --> supervisor app.js로 실행
  npm install supervisor -g //어느 위치에서 하든 무관

[웹 애플리케이션 제작] 서버저장 및 제공 기능 구현
1. 파일 기반 저장 게시판 제작 - 홈 : app_file.js
  - require로 express모듈 가져오기
  - 변수 express에 express모듈 담기
  - 변수app 에 애플리케이션 객체를 리턴하는 express()함수 사용.

* extends ./layout.jade를 호출가능 = 공통부분,
  ./layout.jade의 block content는 호출한 자식의 코드를 넣는 분이고,
  ./호출하는.jade의 block content는 부모에 들어갈 코드라는 의미

* npm install --save body-parser : bodyparser구글링해서 사용법 참고
  app_file.js에서 사용 , post데이터에 접근하도록 해줌
* data 폴더에 게시글 저장 : app_file.js에서 filesystem사용은 require('fs');
* send()가 실행되면 다음 코드 실행안됨. 서버에 전송하고 나면 함수 하나 종료
  console.log(err); //서버 콘솔로 확인 가능
* fs.readdir('file', function(err,files));
* res.render('jadeName', {varName:valueOrVarInServer})
* jade 문법 : 반복문
  each var in [arr]
    li=var
* 바뀌는 정보는 콜론(:매개변수명)으로 표시하고, 함수안에서 사용 가능
* 비슷한 뷰의 중복을 제거하는 방법 : express는 route에 여러개의 path를 가질 수 있다(배열형식으로)
* response객체의 redirect함수 : res.redirect('url'); //url로 바로 연결

2. 파일 업로드
- multer라는 파일 저장하는 express 모듈사용 : npm install --save multer
 jade에서 enctype="multipart/form-data"로 form 속성을 설정해야 파일 전달 가능
 app.js에서 multer를 이용하여 파일업로드를 받을 수 있는 미들웨어를 지정 가능
 - upload라는 미들웨어가 post('url', middleware, function );에서 url로 들어갔을 때 function보다 먼저 실행된다.
  upload.single('userfile')가 실행되고, single()의 인자에는 파일을 받는 input의 name을 사용
* multer심화 : https://github.com/egoing/server_side_javascript_tutorials/commit/2fabce8a730dc3d82e0bd0c005d3fda0bca9b7e8

3. 쿠키 - app_cookie.js : 3003포트
- express 에는 쿠키기능이 기본으로 없기 때문에
- express에서 api문서를 보면 req.cookies()를 찾을 수 있고,
  cookie를 사용하기 위해 cookie parser라는 미들웨어를 사용한다는 것을 알게 됨
- 설치 : npm install cookie-parser --save(package.json파일에도 추가)
- res.cookies()라는 함수를 사용하면, //header에 set-cookie라는 속성이 생김
 res.send()시, //브라우저에서 요청받은request.cookies사용가능
* set-cookie 속성에는 cookie, path를 설정한다 - path에 따라 다른 쿠키가 생성된다.
 req.cookies.count는 string형식
* for(var name in products){
 //products(객체)ㄴ가 가지고 있는 값들 만큼 name을 인덱스로 객체의 속성명이 할당되는 js반복문
* output += `<li>${products[name].title}</li>`; //html출력방법
- 쿠키값을 그냥 보내면 캡쳐시 헤더에서 값을 추출하고 인코딩만하면 볼 수 있음
  --> 방법 1. https 통신을 하면 헤더?패킷?를 암호화해서 보내줌
  --> 방법 2. cookieParser('hash key값');하여 쿠키를 암호화 하고,
    req.signedCookies로 사용, res.cookie('name', value, {signed:true});로 쿠키설정

4. 세션 : 쿠키를 개선한 방법 - 예제) counter application
 [기존] 서버는 응답을 하면서 쿠키로 모든 데이터를 저장한다.
 - 문제점 : 보안이 중요한 정보의 경우
 [세션] 쿠키로 id값(식별자)만을 저장한다. 그외 실제 데이터는 서버에 저장된다.
 - 사용자가 서버에 접속했을 때, 요청하면서 식별자를 전송한다.
 - 서버에서는 그 식별자로 데이터를 찾아 결과를 보여준다.
 [쿠키와의 차이점] http통신 확인 : f12-network창에서 헤더 확인 가능
 데이터를 브라우저에 저장하느냐(쿠키) 마느냐(세션)의 차이
 - 쿠키 : 웹브라우저에 (real data인)count값이 저장되어있어서,
    - 서버에 나중에도 보낼 수 있음(지속적사용가능)
 - 세션 : 웹브라우저에는 count대신 connect.sid만 저장해두어
    서버에서 각 사용자의 데이터를 저장해두었다가 real data를 응답해준다.
    - 브라우저에서 나중에는 서버에 요청할 수 없음.(1회용)
    (쿠키를 이용한 식별자)connect.id의 값이 같은 요청은 같은 사용자로 요청한다.
    ? real data를 보호하는 의미가 있다. 의미있는 데이터를 보호할 수 있다.
      그러나 세션 아이디 자체가 탈취되면 위험! (그래서 id만 기억해주는건가?)
 [예제] app_session.js :3004포트
- express-session npm 설치
- session 모듈 require하고, github.com/expressjs/session에서 사용버버 확인
- sid데이터는 애플리케이션의 메모리 상에만 존재한다.
  서버를 껐다 켜면 sid새로 발급됨.
  db에 세션데이터를 저장해야 데이터를 보존할 수 있음!
[이어서 예제] login application - 인증처리 안됨(인증하는 오픈소스이용할 것)
- get method로 입력받는 페이지 만들고
- post방식으로 폼에서 전송하여 post를 받는 페이지에서 로그인 프로세스 제작
- req.session.displayName = user.displayName;
  //session id에 해당하는 정보로서 session값 설정
  //session이 부여되어 displayName이 존재하면, login성공
  session으로 받을 수 있는 값에 따라 개인화된 페이지 제공 가능
  //session 정보 지우기 = js 명령어 delete이용
- 세션정보 저장 : 메모리(위), 파일!, db
 메모리는 애플리케이션 끄면 세션데이터 날아감
 파일이나 db는 영구적 저장 가능
- 파일저장 : session-file-store 모듈 설치
  npm install --save session-file-store //프로젝트에 포함되어야하는 모듈이므로 --save
  //기본 세션 저장소는 directory 'sessions' 생성하여 이용
  //다시 로그인해도 새로 세션 파일이 생성되지 않음 - 서버에 이미 등록되었으므로
    변경은 가능. 컴퓨터를 껐다 켜도 동일
- db저장 : express-mysql-session 모듈 설치
 //mysql설치가 전제  - sessions라는 테이블 생성하여 저장
 //(session_id, expires, data:세션id에 따라 제공하는 데이터 라는 속성들 존재)
 //session값을 가져오는 방법은 그대로 이다.
* save의 인자로 실행하면, 저장이후 redirection
* app_session_file.js를 하는 과정에서 ./session 디렉토리에 .json 파일이 재생성되는 문제가 발생했어요.
-> app.use(session({ ... })안 property 중에 store: new FileStore()에서 option을 줄 수 있는데 option으로 path를 잡아주니 해결이 되었어요.
[이어서 예제] 다중사용자 세션
1. /register
* 기존 사용자 추가시 이미 있는 id이면 불가능, 비밀번호 비어있으면 재입력 요청 등 예외 처리 필요
- users.push(user); //배열에 값 추가
2. authentication
- for문 중지는 return으로 함. 비동기 방식
