npm install --save passport passport-local
reactJS 리덕스강좌와 연결 https://www.zerocho.com/category/React/post/57b60e7fcfbef617003bf456
passport-local은 로그인을 직접 구현할 때 사용됩니다. 이외에 passport-google-oauth, passport-facebook, passport-twitter, passport-kakao와 같이 SNS 계정을 통해서 바로 로그인할 수 있는 패키지도 있습니다.
예제 passport.js
var passport = require('passport');
var LocalStrategy = require('passport-local').Strategy;
var Users = require('./user');

module.exports = function () {
  passport.serializeUser(function (user, done) {
    done(null, user);
  });

  passport.deserializeUser(function (user, done) {
    done(null, user);
  });

  passport.use(new LocalStrategy({
    usernameField: 'id'
  }, function (id, password, done) {
    Users.findOne({ id: id }, function (findError, user) {
      if (!user) return done(null, false, { message: '존재하지 않는 아이디입니다' });
      return user.comparePassword(password, function (passError, isMatch) {
        if (isMatch) {
          return done(null, user);
        }
        return done(null, false, { message: '비밀번호가 틀렸습니다' });
      });
    });
  }));
  /* 다른 방식 :http://webframeworks.kr/tutorials/expressjs/auth_log_in_out/
  exports.setup = function(){
    passport.use(new LocalStrategy({

    },function(email, password, done){

    }));
  };
  */
};
passport는 독특하게 Strategy(전략)이라는 것을 사용합니다. 모든 passport의 플러그인들은 사용하려면 전략을 짜 주어야 합니다. 위의 경우는 local 로그인의 경우의 전략입니다. 일단 serializeUser과 deserializeUser은 잠시 뒤에 설명할 거고요. LocalStrategy 부분을 보시죠.
usernameField는 어떤 폼 필드로부터 아이디를 전달받을 지 설정하는 옵션입니다. 아이디와 비밀번호 값이 들어오면 뒤의 콜백 함수가 실행되는데, 내용을 보면 id로 유저를 찾은 후, 유저가 없으면 존재하지 않는 아이디라고 에러를 보냅니다. 유저가 있다면, 이제 비밀번호를 비교해서(비밀번호를 비교하는 부분은 아래 user.js 파일의 comparePassword를 참조하세요), 비밀번호가 맞을 경우 done(null, user); 로 user 객체를 전송해주고, 틀렸을 경우는 비밀번호가 틀렸다고 메시지를 전송합니다. 잘 보시면 에러가 나는 경우에는 두 번째 인자가 모두 false이고, 세 번째 인자로 에러 메시지를 전송합니다.
serializeUser은 방금 전에 로그인 성공 시 실행되는 done(null, user); 에서 user 객체를 전달받아 세션에 저장합니다. 세션이 있어야 페이지 이동 시에도 로그인 정보가 유지될 수 있습니다. deserializeUser은 실제 페이지 이동 시마다 세션 정보(serializeUser에서 저장됨)를 비교해서 유저 정보가 있으면 정보를 넘겨줍니다. 하지만 예시에서는 그냥 아무런 처리과정 없이 그냥 넘겨주도록 했습니다. 이 두 메소드는 꼭 있어야 작동합니다. 반드시 넣어주셔야 합니다.

user.js
var mongoose = require('mongoose');

var userSchema = new mongoose.Schema({
  id: String,
  password: String
});
userSchema.methods.comparePassword = function comparePassword(inputPassword, cb) {
  if (inputPassword === this.password) {
    cb(null, true);
  } else {
    cb('error');
  }
};
module.exports = mongoose.model('users', userSchema, 'users');

서버에는 passport를 모듈을 불러와 사용할 수 있도록 코드를 추가해줍니다.
server.js
var express = require('express');
var path = require('path');
var app = express();
var db = require('./db.js');
var route = require('./route.js');
var passport = require('./passport.js'); // 여기와
app.set('view engine', 'pug');
app.set('views', path.join(__dirname, 'html'));
db();
passport(); // 이 부분 추가
app.use(express.static(path.join(__dirname, 'html')));
app.use('/', route);
app.listen(8080, function () {
  console.log('Express App on port 8080!');
});

마지막으로 route.js에 로그인을 처리하는 라우트를 추가해줍니다.
route.js
var passport = require('passport');
...
router.post('/login', passport.authenticate('local', {
  failureRedirect: '/'
}), function (req, res) {
  res.redirect('/');
});

이제 /login으로 post 요청을 보내면(로그인 html은 직접 만들어 보세요. action이 '/login'이고 method가 'post'인 form을 만들면 됩니다.) passport에서 local에 대한 인증 작업을 시작합니다. 실패할 경우와 성공할 경우 어디로 돌려보낼 지 각각 failureRedirect와 res.redirect에 위치를 지정할 수 있습니다.
다음 시간에는 passport로 facebook 로그인을 만드는 것을 알아볼까요?
출처 | https://www.zerocho.com/category/NodeJS/post/57b7101ecfbef617003bf457

우선 passport-facebook을 설치합니다.
npm install --save passport-facebook
설치가 완료되었으면 페이스북에 로그인 요청을 보낼 라우터를 추가합니다.
route.js
// 이전 시간 코드에서 계속
router.get('/auth/facebook', passport.authenticate('facebook', {
  authType: 'rerequest', scope: ['public_profile', 'email']
}));
router.get('/auth/facebook/callback', passport.authenticate('facebook', { failureRedirect: '/' }), function(req, res) {
  res.redirect('/');
});
전 시간과 달리 router에 두 개를 추가했습니다. /auth/facebook은 로그인 요청을 할 링크입니다. 이 링크를 html로 만들고 클릭하면 passport를 통해 페이스북으로 로그인 요청이 전송됩니다. authenticate 메소드 뒤의 facebook은 사용할 전략의 이름을 적어주면 됩니다.
authType:  'rerequest'는 매번 로그인 할 때마다 뒤의 public_profile과 email을 달라고 요청하는 겁니다. 이것을 해둬야 실수로 요청을 거절했을 때 다음에 로그인할 때 다시 얻어올 수 있습니다. 뒤에 scope는 페이스북에 사용자에 대한 정보로 무엇을 요청할 지 정하는 부분입니다. 친구목록이나 좋아요한 페이지 등등 다양한 정보를 얻어올 수 있습니다.

/auth/facebook/callback은 페이스북이 검증을 마치고 난 결과를 전송해주는 주소입니다. 여기로 전송한 정보를 처리하는 코드를 만들어보죠. 지난 시간 만들었던 passport.js의 LocalStrategy 아래에 다음 코드를 추가해줍니다.
passport.js
var passport = require('passport');
var LocalStrategy = require('passport-local').Strategy;
var FacebookStrategy = require('passport-facebook').Strategy; // 이 부분 추가
var Users = require('./user');

module.exports = function() {
  ... // 이전 시간 코드에서 계속
  passport.use(new FacebookStrategy({
    clientID: '페이스북 클라이언트 아이디',
    clientSecret: '페이스북 클라이언트 시크릿',
    callbackURL: '홈페이지주소/auth/facebook/callback',
    passReqToCallback: true,
  }, function(req, accessToken, refreshToken, profile, done) {
    User.findOne({ id: profile.id }, function(err, user) {
      if (user) { return done(err, user); } // 회원 정보가 있으면 로그인
      const newUser = new User({
        id: profile.id
      });
      newUser.save(function() {
        return done(null, newUser); // 새로운 회원 생성 후 로그인
      });
    });
  }
};
슬슬 코드가 콜백 지옥으로 빠져들어가고 있네요. 찬찬히 살펴봅시다. 일단 passport-facebook도 Strategy를 사용합니다. 전략이라고 했죠? 페이스북 로그인은 페이스북 서버에서 clientID, clientSecret, callbackURL을 검사합니다. 이 부분은 나중에 무엇을 넣어야하는지 알려드릴게요.
passReqToCallback 옵션은 바로 아랫줄에 첫 번째 인자로 req(request 객체)를 사용할 수 있게 해줍니다. 만약 이 옵션이 false면 function(accessToken, refreshToken, profile, done) 이렇게 해야 합니다. 이 예시에서는 req를 사용하지는 않았지만 이렇게 사용할 수 있다는 것을 알려드립니다.
accessToken, refreshToken은 페이스북 API를 사용할 수 있는 토큰을 전달해줍니다. 만약 페이스북이 토큰 내놔라! 라고 하면 이 토큰을 주면 됩니다. profile은 간단한 페이스북 사용자의 정보를 알려줍니다. 별로 알려주는 게 많이 없어서 추가적인 정보를 원한다면 추가 API를 호출해야 합니다.

이제 전략 부분을 설명하겠습니다. 일단 profile.id로 이미 우리 사이트의 회원인가를 조회해봅니다. 만약 우리 사이트에 이미 가입되어 있으면 done(err, user)로 바로 로그인합니다. 회원이 아니라면 새로 회원가입하는 거죠.
거의 다 되었는데 이제 clientID와 clientSecret을 넣어야합니다. 이것이 있어야 페이스북에서 보내준 결과가 올바른 사이트에 전달되었는지 확인할 수 있거든요. 이것을 얻으려면 페이스북 개발자 홈페이지에 접속해야 합니다.

로그인 후 상단 오른쪽 내 앱 -> 새 앱 추가 -> 웹사이트를 누르세요. 원하는 앱 이름을 적고 Create New Facebook App ID를 누르면 됩니다.
저는 test로 앱을 만들었는 데 이름은 원하는 걸로 바꾸세요. 정보를 알맞게 적고 앱 ID 만들기를 누릅니다. 사이트 주소도 넣어줍니다.
이제 오른쪽 위 내 앱 -> test에 가면 clientID와 clientSecret을 확인할 수 있습니다.
위의 코드를 활용해서 다른 SNS 로그인도 구현해보세요. 저는 현재 페이스북, 구글+, 트위터, 카카오 이렇게 네 개를 사용중입니다. 다음 시간에는 socket.io에 대해 알아보겠습니다.
